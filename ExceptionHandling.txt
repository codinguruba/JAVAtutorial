Exception:
-----------
-->Exception are the runtime errors which terminate the running program if not handled.
-->In java, exception is an object that represents an exceptional condition has arised during runtime.
-->The process of handling exception in order to prevent sudden termination of program is called exception handling.
-->Five keywords can be used for handling exceptions:
   try, catch, finally, throw, throws
   The Exception Handling in Java is one of the powerful mechanism to handle the runtime errors so that
   the normal flow of the application can be maintained
   
   
   
   Types of exception:
--------------------
1. Checked Exception:
   These are the exception that are checked by the compiler. If our program uses the code that might generate checked exception,
   we must use exception handling technique in our program otherwise our program can't be executed. IOException, SQLException etc are checked exceptions.
2. Unchecked Exception:
   These are the exception that are not checked by the compiler. We can run the program, however, during program execution, 
   if these exceptions occur, program gets terminated. ArithmeticException, ArrayIndexOutOfBoundsException are unchecked exceptions.
   
   We handle exceptions using / What are the JAVA exception keywords//
   
   
   try - The "try" keyword is used to specify a block where we should place an exception code. It means we can't use try block alone.
   The try block must be followed by either catch or finally.
   
   catch  --> used to hold the exception thrown from the try block
   
   finally -  The "finally" block is used to execute the necessary code of the program. 
   It is executed whether or not  an exception is handled.
   
   throw   --> used to explicitly throw an exception object
   
   throws --> used to inform the users that a method throws exception and hence use exception handling mechanism.
   
   
   //Arithmetic Exception//
   public class Main {
    public static void main(String[] args) {
        int a = 10;
        int b= 0;
        try{
            
        int c= a/b;
        
        }
        catch(ArithmeticException ex){
            System.out.println(ex);
        }
        System.out.println("Rest of the code....");
    } 
    }
    
    // ArrayIndexOutOfBoundsException 
    
    public class Main {
    public static void main(String[] args) {
        int a[] = {5,6,7,8,9};
        try{
        System.out.println(a[5]);
        }
        catch(ArrayIndexOutOfBoundsException ex){
            System.out.println(ex);
            
        }
        System.out.println("Rest of my code...");
    }   
    }

    
// finally keyword example in java
public class Main {
    public static void main(String[] args) {
       int a = 10;
       int b = 0;
       try{
       int c = a/b;
       }
       catch(ArithmeticException ex){
           System.out.println(ex);
       }
       finally{
           System.out.println("This is finally block example");
       }
        
       
    }   
    }
// throws example//
public class Example{
    static int  divide(int a , int b) throws ArithmeticException{
        int div = a/b;
        return div;
    }
    
    public static void main(String[] args) {
        try{
        divide(10,0);
        }
        catch(ArithmeticException ex){
            System.out.println(ex);
        }
        System.out.println("Rest of the code.....");
        
    }
}

   // throw example//
   
   public class ThrowExample {
    static void check(int age){
        if(age<18){
            throw new ArithmeticException("Sorry not eligible");
        }
        else{
            System.out.println("You can vote");
        }
        
    }
    public static void main(String[] args) {
        try{
        check(15);
    }
        catch(ArithmeticException ex){
            System.out.println(ex.getMessage());
            
        }
    }
}

// USER defined exception in JAVA

class UserException extends Exception
{
	String showMessage()
	{
		return "Sorry Not Eligible";
	}
}
class UserExceptionExample
{ 
	static void check(int age)throws UserException
	{
		if(age<18)
		{
			throw new UserException();
		}
		else
		{
			System.out.println("You Are Welcome To PUB");
		}
	}
public static void main(String[] args)
	{
		try
		{
			check(12);
		}
		catch(UserException ue)
		{
			System.out.println(ue.showMessage());
		}
	}
   
}
//Multiple catch statement//
class MultiCatchBlockExample
{
	public static void main(String[] args)
	{	int[] a = {2,4,6,8};
		int b=5,c=0,d;
		try
		{	d=b/c;
			System.out.println(a[4]);			
		}
		catch(ArithmeticException e)
		{
			System.out.println("Cannot Divide By Zero");
		}
		catch(ArrayIndexOutOfBoundsException e)
		{
			System.out.println("Array Index Out Of Bounds Exception");
		}		
		System.out.println("rest of codes");
	}
}

