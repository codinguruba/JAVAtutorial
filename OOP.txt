this keyword in JAVA.
class Person{
    //
    String name;
    String address;
    int age;
    
    public void set(String name , String address , int age){
        this.name = name;
        this.address = address;
        this.age = age;
        
    }
    
    public void display(){
        System.out.println("Name:"+name);
        System.out.println("Address:"+address);
        System.out.println("Age:"+age);
    }
      
}
public class Demo {
    public static void main(String[] args) {
       Person ob = new Person();
       ob.set("Aachal", "Chabil", 20);
       ob.display();
           
          
       
    }
    
}

//Constructor example in JAVA

class Person{
    String name;
    String address;
    int age;

    public Person(String name, String address, int age) {
        this.name = name;
        this.address = address;
        this.age = age;
    }
    
    public void display(){
        System.out.println("Name:"+name);
        System.out.println("Address:"+address);
        System.out.println("Age:"+age);
    }
        
      
}
public class Demo {
    public static void main(String[] args) {
       Person ob = new Person("Aaraj","Sukedhara",20);
       ob.display();
                 
    }
    
}

// interface example // 
interface A{
    public int add(int a , int b);
    public int subtract(int a , int b);
    public int multiply(int a ,int b);
            
         
}
class B implements A{
    
    @Override
    public int add(int a ,int b){
        return a+b;
    }
   
    @Override
    public int subtract(int a ,int b){
        return a-b;
    }
    
    @Override
    public int multiply(int a ,int b){
        return a*b;
    }
    
}
public class Demo {
    public static void main(String[] args) {
      B ob = new B();
      System.out.println(ob.add(5, 4));
      System.out.println(ob.subtract(3, 2));
      System.out.println(ob.multiply(2, 3));
      
       
    }
    
}

Abstract class example in JAVA
abstract class Shape{
    public abstract void draw();
}

class Rectangle extends Shape{
    
    @Override
    public void draw(){
        System.out.println("Drawing Rectangle");
    }
}
 class Square extends Shape{
     @Override
     public void draw(){
         System.out.println("Drawing Square");
     }
 }


public class Demo2 {
    public static void main(String[] args) {
        Rectangle r1 = new Rectangle();
        r1.draw();
        Square s1 = new Square();
        s1.draw();
    }
}

// OOP example solution // 
interface Shape{
    public void area();
    public void perimeter();
}

class Circle implements Shape{
    int radius = 4;
    @Override
    public void area(){
        System.out.println("Area of circle:"+3.14*radius*radius);
    }
    @Override
    public void perimeter(){
        System.out.println("Perimeter of circle:"+2*3.14*radius);
    }
}

class Rectangle implements Shape{
    int length = 5 ;
    int breadth = 4;
    
    @Override
    public void area(){ 
        System.out.println("Area of rectangle:"+length*breadth);
    }
    @Override
    public void perimeter(){
        int perimeter = 2*(length+breadth);
        System.out.println("Perimeter of rectangle:"+perimeter);
        
    }
}

public class Main {

    public static void main(String[] args) {
        Circle c1 = new Circle();
        c1.area();
        c1.perimeter();
        System.out.println("");
        Rectangle r1 = new Rectangle();
        r1.area();
        r1.perimeter();
        

    }
}


